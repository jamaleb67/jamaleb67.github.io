```python
# install software packages
# install libraries
# download the website
import requests
page = requests.get("https://dataquestio.github.io/web-scraping-pages/simple.html")
page
```


```python
# print out HTML content of page
page.content
```




    b'<!DOCTYPE html>\n<html>\n    <head>\n        <title>A simple example page</title>\n    </head>\n    <body>\n        <p>Here is some simple content for this page.</p>\n    </body>\n</html>'




```python
# Create instance of BeautifulSoup class to parse document and extract text 
from bs4 import BeautifulSoup
soup = BeautifulSoup(page.content, 'html.parser')
```


```python
# Allows to print out HTML page content
print(soup.prettify())
```

    <!DOCTYPE html>
    <html>
     <head>
      <title>
       A simple example page
      </title>
     </head>
     <body>
      <p>
       Here is some simple content for this page.
      </p>
     </body>
    </html>
    


```python
#Tags have commonly used names that depend on their position in relation to other tags:

#   child — a child is a tag inside another tag. So the two p tags above are both children of the body tag.
#   parent — a parent is the tag another tag is inside. Above, the html tag is the parent of the body tag.
#   sibiling — a sibiling is a tag that is nested inside the same parent as another tag. For example, head and body are siblings, since they’re both inside html. Both p tags are siblings, since they’re both inside body.
```


```python
list(soup.children)
# Note: children returns a list generator, so need to call the list function on it
# Following denotes two tags, i.e.,: html doc type tag and the html tag
```




    ['html',
     '\n',
     <html>
     <head>
     <title>A simple example page</title>
     </head>
     <body>
     <p>Here is some simple content for this page.</p>
     </body>
     </html>]




```python
# Good to know the type of each element in list
[type(item) for item in list(soup.children)]
```




    [bs4.element.Doctype, bs4.element.NavigableString, bs4.element.Tag]




```python
# Note that the elements above are identified with an index beginning at 0
# Hence, the tag of interest above, i.e., the tag object which contains the nested tag is [2]

html=list(soup.children)[2]

list(html.children)

```




    ['\n',
     <head>
     <title>A simple example page</title>
     </head>,
     '\n',
     <body>
     <p>Here is some simple content for this page.</p>
     </body>,
     '\n']




```python
# There are two tags above, head and body tags
# Want to extract the text within the body tag

body=list(html.children)[3]

```


```python
list(body.children)
```




    ['\n', <p>Here is some simple content for this page.</p>, '\n']




```python
# IDs and classes are useful because they can be used to specify the elements we want to scrape

page = requests.get("https://dataquestio.github.io/web-scraping-pages/ids_and_classes.html")
soup = BeautifulSoup(page.content, 'html.parser')
soup
```




    <html>
    <head>
    <title>A simple example page</title>
    </head>
    <body>
    <div>
    <p class="inner-text first-item" id="first">
                    First paragraph.
                </p>
    <p class="inner-text">
                    Second paragraph.
                </p>
    </div>
    <p class="outer-text first-item" id="second">
    <b>
                    First outer paragraph.
                </b>
    </p>
    <p class="outer-text">
    <b>
                    Second outer paragraph.
                </b>
    </p>
    </body>
    </html>




```python
# Use find_all method to search for items by class or by id
# In example below, searching for any p tag that has class outer-text

soup.find_all('p',class_='outer-text')
```




    [<p class="outer-text first-item" id="second">
     <b>
                     First outer paragraph.
                 </b>
     </p>,
     <p class="outer-text">
     <b>
                     Second outer paragraph.
                 </b>
     </p>]




```python
# Example: Look for any tag that has class outer-text
soup.find_all(class_="outer-text")
```




    [<p class="outer-text first-item" id="second">
     <b>
                     First outer paragraph.
                 </b>
     </p>,
     <p class="outer-text">
     <b>
                     Second outer paragraph.
                 </b>
     </p>]




```python
# Can also search for elements by id
soup.find_all(id="first")
```




    [<p class="inner-text first-item" id="first">
                     First paragraph.
                 </p>]




```python
# Next, find the page want to scrape
# Determine the data/information want to scrape
# Right click on page near data want to "Inspect"--this opens up the tag that contains the 
# text looking for in the Elements panel

# Scroll up in the elements panel to find the "outermost" element containing all of the text that corresponds
# to what you are looking for in process

# In the example, seeking div tag that contains each of the items of interest, e.g.,: tombstone-container

# Now to scrape

page = requests.get("https://forecast.weather.gov/MapClick.php?lat=37.7772&lon=-122.4168")
soup = BeautifulSoup(page.content, 'html.parser')
seven_day = soup.find(id="seven-day-forecast")
forecast_items = seven_day.find_all(class_="tombstone-container")
tonight = forecast_items[0]
print(tonight.prettify())
```

    <div class="tombstone-container">
     <p class="period-name">
      Today
      <br/>
      <br/>
     </p>
     <p>
      <img alt="Today: Sunny, with a high near 61. North wind 5 to 9 mph. " class="forecast-icon" src="newimages/medium/few.png" title="Today: Sunny, with a high near 61. North wind 5 to 9 mph. "/>
     </p>
     <p class="short-desc">
      Sunny
     </p>
     <p class="temp temp-high">
      High: 61 °F
     </p>
    </div>
    


```python
# Can extract each individual piece of information 
# As we can see, inside the forecast item tonight is all the information we want. 
# There are four pieces of information we can extract:

# -- The name of the forecast item — in this case, Tonight.
# -- The description of the conditions — this is stored in the title property of img.
# -- A short description of the conditions — in this case, Mostly Clear.
# -- The temperature low — in this case, 49 degrees.

period = tonight.find(class_="period-name").get_text()
short_desc = tonight.find(class_="short-desc").get_text()
temp = tonight.find(class_="temp").get_text()
print(period)
print(short_desc)
print(temp)
```

    Today
    Sunny
    High: 61 °F
    


```python
# Can also extract all the information from page with aid of CSS selectrors and listcomprehensions
# Current Example: Select all items with the class period-nae inside item with class tombstone-container in seven_day
# Use list comprehension to call the get_text method on each BeautifulSoup object

period_tags = seven_day.select(".tombstone-container .period-name")
periods = [pt.get_text() for pt in period_tags]
periods

```




    ['Today',
     'Tonight',
     'Tuesday',
     'TuesdayNight',
     'Wednesday',
     'WednesdayNight',
     'Thursday',
     'ThursdayNight',
     'Friday']




```python
# Can apply same technique to get other fields

short_descs = [sd.get_text() for sd in seven_day.select(".tombstone-container .short-desc")]
temps = [t.get_text() for t in seven_day.select(".tombstone-container .temp")]
descs = [d["title"] for d in seven_day.select(".tombstone-container img")]

print(descs)
print(short_descs)
print(temps)
      

```

    ['Today: Sunny, with a high near 61. North wind 5 to 9 mph. ', 'Tonight: Mostly clear, with a low around 46. North wind 5 to 9 mph. ', 'Tuesday: Sunny, with a high near 60. Northwest wind around 7 mph. ', 'Tuesday Night: Mostly cloudy, with a low around 46. North wind around 7 mph. ', 'Wednesday: Mostly sunny, with a high near 60. North northwest wind around 7 mph. ', 'Wednesday Night: Mostly cloudy, with a low around 46.', 'Thursday: Mostly sunny, with a high near 58.', 'Thursday Night: Partly cloudy, with a low around 46.', 'Friday: Mostly sunny, with a high near 58.']
    ['Sunny', 'Mostly Clear', 'Sunny', 'Mostly Cloudy', 'Mostly Sunny', 'Mostly Cloudy', 'Mostly Sunny', 'Partly Cloudy', 'Mostly Sunny']
    ['High: 61 °F', 'Low: 46 °F', 'High: 60 °F', 'Low: 46 °F', 'High: 60 °F', 'Low: 46 °F', 'High: 58 °F', 'Low: 46 °F', 'High: 58 °F']
    


```python
# Kind of hard to read and analyze so want to structure in a Programming (in this case: Python) Pandas Dataframe

import pandas as pd
weather = pd.DataFrame({
    "period": periods,
    "short_desc": short_descs,
    "temp": temps,
    "desc":descs
})
weather

```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>period</th>
      <th>short_desc</th>
      <th>temp</th>
      <th>desc</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Today</td>
      <td>Sunny</td>
      <td>High: 61 °F</td>
      <td>Today: Sunny, with a high near 61. North wind ...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Tonight</td>
      <td>Mostly Clear</td>
      <td>Low: 46 °F</td>
      <td>Tonight: Mostly clear, with a low around 46. N...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Tuesday</td>
      <td>Sunny</td>
      <td>High: 60 °F</td>
      <td>Tuesday: Sunny, with a high near 60. Northwest...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>TuesdayNight</td>
      <td>Mostly Cloudy</td>
      <td>Low: 46 °F</td>
      <td>Tuesday Night: Mostly cloudy, with a low aroun...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Wednesday</td>
      <td>Mostly Sunny</td>
      <td>High: 60 °F</td>
      <td>Wednesday: Mostly sunny, with a high near 60. ...</td>
    </tr>
    <tr>
      <th>5</th>
      <td>WednesdayNight</td>
      <td>Mostly Cloudy</td>
      <td>Low: 46 °F</td>
      <td>Wednesday Night: Mostly cloudy, with a low aro...</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Thursday</td>
      <td>Mostly Sunny</td>
      <td>High: 58 °F</td>
      <td>Thursday: Mostly sunny, with a high near 58.</td>
    </tr>
    <tr>
      <th>7</th>
      <td>ThursdayNight</td>
      <td>Partly Cloudy</td>
      <td>Low: 46 °F</td>
      <td>Thursday Night: Partly cloudy, with a low arou...</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Friday</td>
      <td>Mostly Sunny</td>
      <td>High: 58 °F</td>
      <td>Friday: Mostly sunny, with a high near 58.</td>
    </tr>
  </tbody>
</table>
</div>




```python
# Now for the Analysis
# Can use a regular expression and the Series.str.extract method to pull out the numeric temperature values

temp_nums = weather["temp"].str.extract("(?P<temp_num>\d+)", expand=False)
weather["temp_num"] = temp_nums.astype('int')
temp_nums
```




    0    61
    1    46
    2    60
    3    46
    4    60
    5    46
    6    58
    7    46
    8    58
    Name: temp_num, dtype: object




```python

```
